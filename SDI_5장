요구사항
- 키-값 쌍의 크기는 10KB 이하이다.
- 큰 데이터를 저장할 수 있어야 한다.
- 높은 가용성을 제공해야 한다. 장애가 발행해도 빠른 응답이 가능해야 한다.
- 높은 확장성을 제공해야 한다. 트래픽에 따라 AutoScaling이 되어야 한다.
- 데이터 일관성 수준은 조정이 가능해야 한다.
- 응답 지연시간(latency)이 짧아야 한다.


CAP 정리
- Consistency (데이터 일관성) : 어느 노드에 접속하더라도 동일한 데이터를 제공
- Availability (데이터 가용성) : 일부 노드에 장애가 발생하더라도 데이터를 제공
- Partition Tolerance (파티션 감내) : 노드간 네트워크 단절이 있더라도 데이터를 제공 


현실세계 분산시스템
- CP 시스템 : 데이터 가용성을 포기 (일관성을 강조한다. 가장 보편적인 시스템 - RDB)
- AP 시스템 : 데이터 일관성을 포기 (가용성을 강조한다. 일부 테이터가 유실되더라도 서비스 가능 - NoSQL)
- CA 시스템 : 분산시스템은 데이터가 네트워크로 분산되므로 현실세계에서는 존재하지 않는다.


데이터 다중화
- 높은 가용성과 안정성을 위하여 N개 서버가 존재해야 한다.
- N개의 서버 데이터는 비동기적으로 다중화(Replication) 해야 한다.


데이터 일관성
- N개의 노드에 다중화된 데이터는 적절히 동기화가 되어야 한다.
- 별도의 중계자가 필요하다. (정족수 합의 : Quorum Consensus) 
  - N : 데이터 노드 수
  - W : 쓰기 연산에 대한 정족수
  - R : 읽기 연산에 대한 정족수
- R=1, W=N : 읽기 연산에 최적화
- W=1, R=N : 쓰기 연산에 최적화
- W+R > N : 강한 일관성이 보장됨


나의 설계는?
- AP 시스템으로 설계 (최악의 경우 과거 데이터가 일부 조회될수 있음)
- 마스터 노드는 주키퍼로 설계 
  (3대 이상으로 구성하여 Split Brain 문제 방지)
  (마스터 노드는 장애에 대한 복구능력이 없다. 관리자 개입이 필요)
- 데이터 노드는 멀티케스트 방식으로 연결되어 데이터 동기화 
  (Consistent Hash가 구현되어 노드 추가/삭제가 가능)
  (노드 추가에 따른 데이터 리벨런싱 가능)
- 데이터는 기본 5개의 샤드로 분산 저장
- Primary Data는 1벌만 존재 (RW 가능)
- Secondary Data는 2벌(우선순위가 있음)이 존재 (ReadOnly)
- 쓰기 연산은 Paimary Data Shard와 Secondary Data Shard 2벌이 완성되는 순간 커밋으로 간주
- 특정 노드 장애시 장애발생 노드에 Primary Data 샤드가 존재한다면 우선순위에 따라 Secondary Data 샤드가 Primary Data 샤드로 즉시 승격되고 승격과정이 끝날때까지 쓰기가 금지된다.
  (이때 특정 데이터의 Transaction log가 유실된체 Primary Data가 될 수 있다. 이때 데이터 일관성이 깨질수 있음)  
  (데이터의 복구는 가능한가? 이 상황이라면 Secondary에도 커밋전일 가능성이 매우 크기때문에 복구는 불가능할듯....)
- 쓰다보니 Elasicsearch???  


